AWSTemplateFormatVersion: '2010-09-09'
Description: |
  GlobalInvoiceAI Agent - Serverless AI-powered invoice validation and generation system
  Features multi-currency support, tax compliance, and automated PDF generation using
  Amazon Bedrock AgentCore with Strands framework.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for resource naming

  CognitoDomainPrefix:
    Type: String
    Description: Unique domain prefix for Cognito hosted UI (auto-generated during deployment)

  DeploymentArtifactsBucket:
    Type: String
    Description: S3 bucket name for storing Lambda function packages

Resources:
  # S3 BUCKETS

  InvoiceUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-invoice-upload-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  ProcessedInvoicesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-processed-invoices-${Environment}'
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldInvoices
            Status: Enabled
            ExpirationInDays: 90
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  AgentCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-agent-code-${Environment}'
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  AmplifySourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-amplify-source-${Environment}'
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  # DYNAMODB TABLES

  InvoicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-Invoices-${Environment}'
      AttributeDefinitions:
        - AttributeName: InvoiceId
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: CreatedAt
          AttributeType: S
        - AttributeName: CustomerId
          AttributeType: S
      KeySchema:
        - AttributeName: InvoiceId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: CustomerIndex
          KeySchema:
            - AttributeName: CustomerId
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  TaxRatesCache:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-TaxRates-${Environment}'
      AttributeDefinitions:
        - AttributeName: CountryRegion
          AttributeType: S
        - AttributeName: TaxType
          AttributeType: S
      KeySchema:
        - AttributeName: CountryRegion
          KeyType: HASH
        - AttributeName: TaxType
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  ProcessingLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-ProcessingLogs-${Environment}'
      AttributeDefinitions:
        - AttributeName: LogId
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
        - AttributeName: InvoiceId
          AttributeType: S
      KeySchema:
        - AttributeName: LogId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: InvoiceTimestampIndex
          KeySchema:
            - AttributeName: InvoiceId
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  # ECR REPOSITORY FOR AGENTCORE

  GlobalInvoiceAIAgentRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${AWS::StackName}-agent-${Environment}'
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  # IAM ROLES

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-execution-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt InvoiceUploadBucket.Arn
                  - !Sub '${InvoiceUploadBucket.Arn}/*'
                  - !GetAtt ProcessedInvoicesBucket.Arn
                  - !Sub '${ProcessedInvoicesBucket.Arn}/*'
                  - !GetAtt AgentCodeBucket.Arn
                  - !Sub '${AgentCodeBucket.Arn}/*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt InvoicesTable.Arn
                  - !GetAtt TaxRatesCache.Arn
                  - !GetAtt ProcessingLogsTable.Arn
                  - !Sub '${InvoicesTable.Arn}/index/*'
                  - !Sub '${TaxRatesCache.Arn}/index/*'
                  - !Sub '${ProcessingLogsTable.Arn}/index/*'
        - PolicyName: AgentCoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agentcore:InvokeAgentRuntime
                Resource: '*'
        - PolicyName: BedrockModelAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/globalinvoiceai/*'

  AgentCoreExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-agentcore-execution-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: AgentCoreRuntimeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agentcore:InvokeAgentRuntime
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt InvoicesTable.Arn
                  - !GetAtt TaxRatesCache.Arn
                  - !GetAtt ProcessingLogsTable.Arn
                  - !Sub '${InvoicesTable.Arn}/index/*'
                  - !Sub '${TaxRatesCache.Arn}/index/*'
                  - !Sub '${ProcessingLogsTable.Arn}/index/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-custom-resource-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AgentCoreManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agentcore:CreateAgentRuntime
                  - bedrock-agentcore:UpdateAgentRuntime
                  - bedrock-agentcore:DeleteAgentRuntime
                  - bedrock-agentcore:GetAgentRuntime
                  - bedrock-agentcore:ListAgentRuntimes
                Resource: '*'
        - PolicyName: ECRPush
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: !GetAtt GlobalInvoiceAIAgentRepo.Arn
        - PolicyName: ParameterStoreWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/globalinvoiceai/*'

  # LAMBDA FUNCTIONS

  InvoiceTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-invoice-trigger-${Environment}'
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          INVOICES_TABLE: !Ref InvoicesTable
          TAX_RATES_TABLE: !Ref TaxRatesCache
          LOGS_TABLE: !Ref ProcessingLogsTable
          PROCESSED_BUCKET: !Ref ProcessedInvoicesBucket
          UPLOAD_BUCKET: !Ref InvoiceUploadBucket
          PDF_GENERATOR_FUNCTION: !Ref PDFGeneratorFunction
          AGENTCORE_RUNTIME_PARAM: !Sub '/globalinvoiceai/agentcore/runtime-arn'
          ENVIRONMENT: !Ref Environment
          AMPLIFY_DOMAIN: !Sub 'https://${AmplifyApp.DefaultDomain}'
      Code:
        S3Bucket: !Ref DeploymentArtifactsBucket
        S3Key: !Sub 'lambda/invoice-trigger-${Environment}.zip'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  PDFGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-pdf-generator-${Environment}'
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          INVOICES_TABLE: !Ref InvoicesTable
          PROCESSED_BUCKET: !Ref ProcessedInvoicesBucket
          ENVIRONMENT: !Ref Environment
          AMPLIFY_DOMAIN: !Sub 'https://${AmplifyApp.DefaultDomain}'
      Code:
        S3Bucket: !Ref DeploymentArtifactsBucket
        S3Key: !Sub 'lambda/pdf-generator-${Environment}.zip'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  AgentCoreDeployFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-agentcore-deploy-${Environment}'
      Runtime: python3.11
      Role: !GetAtt CustomResourceRole.Arn
      Handler: index.handler
      Timeout: 900  # 15 minutes for deployment
      MemorySize: 512
      Environment:
        Variables:
          ECR_REPO: !Ref GlobalInvoiceAIAgentRepo
          AGENT_NAME: !Sub 'GlobalInvoiceAI-${Environment}'
          RUNTIME_PARAM: !Sub '/globalinvoiceai/agentcore/runtime-arn'
          ENVIRONMENT: !Ref Environment
          AGENTCORE_EXECUTION_ROLE_ARN: !GetAtt AgentCoreExecutionRole.Arn
          TAX_RATES_TABLE: !Ref TaxRatesCache
          INVOICES_TABLE: !Ref InvoicesTable
      Code:
        S3Bucket: !Ref DeploymentArtifactsBucket
        S3Key: !Sub 'lambda/agentcore-deploy-${Environment}.zip'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  # EVENTBRIDGE RULE FOR S3 TRIGGERS

  InvoiceUploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-invoice-upload-${Environment}'
      Description: Trigger Lambda when invoices are uploaded to S3
      State: ENABLED
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref InvoiceUploadBucket
          object:
            key:
              - prefix: ""
      Targets:
        - Id: InvoiceTriggerFunction
          Arn: !GetAtt InvoiceTriggerFunction.Arn

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InvoiceTriggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InvoiceUploadEventRule.Arn

  # COGNITO USER POOL

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-users-${Environment}-v2'
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      UsernameAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub '${AWS::StackName}-client-${Environment}'
      GenerateSecret: false
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub '${CognitoDomainPrefix}-${Environment}'

  # API GATEWAY

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api-${Environment}'
      Description: API Gateway for GlobalInvoiceAI
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  # API Resources
  InvoicesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: invoices

  InvoiceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref InvoicesResource
      PathPart: '{invoiceId}'

  StatsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref InvoicesResource
      PathPart: stats

  LogsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: logs

  ConfigResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: config

  MetricsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: metrics

  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref InvoicesResource
      PathPart: upload

  PdfResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref InvoiceResource
      PathPart: pdf

  # CORS OPTIONS Methods
  InvoicesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InvoicesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  InvoiceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InvoiceResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  StatsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StatsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  LogsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref LogsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ConfigOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ConfigResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  MetricsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref MetricsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  UploadOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  PdfOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PdfResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # API Methods and Integrations
  GetInvoicesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InvoicesResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  PostInvoicesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InvoicesResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  GetInvoiceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref InvoiceResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RequestParameters:
        method.request.path.invoiceId: true
        method.request.querystring.pdf: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  GetInvoicesStatsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StatsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  GetLogsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref LogsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  GetConfigMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ConfigResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  PutConfigMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ConfigResource
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  GetMetricsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref MetricsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  PostUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UploadResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500

  GetPdfMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PdfResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RequestParameters:
        method.request.path.invoiceId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvoiceTriggerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 404
          - StatusCode: 500
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # API Gateway Authorizer
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId: !Ref RestApi
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # Lambda Permissions
  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InvoiceTriggerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*'

  PdfGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PDFGeneratorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*'

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  # Gateway Responses for CORS on errors - MUST be before Deployment
  GatewayResponse4xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RestApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponse5xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RestApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponseUnauthorized:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RestApi
      ResponseType: UNAUTHORIZED
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponseAccessDenied:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RestApi
      ResponseType: ACCESS_DENIED
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponseMissingAuthToken:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RestApi
      ResponseType: MISSING_AUTHENTICATION_TOKEN
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponseExpiredToken:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RestApi
      ResponseType: EXPIRED_TOKEN
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponseInvalidSignature:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RestApi
      ResponseType: INVALID_SIGNATURE
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayRootMethod
      - InvoicesOptionsMethod
      - InvoiceOptionsMethod
      - StatsOptionsMethod
      - LogsOptionsMethod
      - ConfigOptionsMethod
      - MetricsOptionsMethod
      - UploadOptionsMethod
      - PdfOptionsMethod
      - GetInvoicesMethod
      - PostInvoicesMethod
      - GetInvoiceMethod
      - GetInvoicesStatsMethod
      - GetLogsMethod
      - GetConfigMethod
      - PutConfigMethod
      - GetMetricsMethod
      - PostUploadMethod
      - GetPdfMethod
      - GatewayResponse4xx
      - GatewayResponse5xx
      - GatewayResponseUnauthorized
      - GatewayResponseAccessDenied
      - GatewayResponseMissingAuthToken
      - GatewayResponseExpiredToken
      - GatewayResponseInvalidSignature
    Properties:
      RestApiId: !Ref RestApi
      Description: !Sub 'Deployment ${AWS::StackId} - CORS Fix with IntegrationResponses ${AWS::StackName} - v20251022-02'

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Environment
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiGatewayDeployment
      Description: !Sub '${Environment} stage for ${AWS::StackName}'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # AMPLIFY APP

  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub '${AWS::StackName}-ui-${Environment}'
      # Bucket deployment strategy - no repository connection, artifacts uploaded manually
      BuildSpec: |
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - echo "Bucket deployment - artifacts already built and uploaded"
            build:
              commands:
                - echo "No build needed - using pre-built artifacts from S3 bucket"
          artifacts:
            baseDirectory: frontend
            files:
              - '**/*'
          cache:
            paths: []
      EnvironmentVariables:
        - Name: REACT_APP_API_URL
          Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_REGION
          Value: !Ref AWS::Region
        - Name: _DEPLOYMENT_STRATEGY
          Value: bucket
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: GlobalInvoiceAI

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: !Sub '${Environment}'
      EnableAutoBuild: false
      Stage: PRODUCTION
      Framework: React
      EnvironmentVariables:
        - Name: REACT_APP_API_URL
          Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_REGION
          Value: !Ref AWS::Region

  # CLOUDWATCH DASHBOARD

  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${AWS::StackName}-dashboard-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["GlobalInvoiceAI", "InvoiceProcessed", "Environment", "${Environment}"],
                  [".", "ProcessingError", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Invoice Processing Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${InvoiceTriggerFunction}"],
                  [".", "Errors", ".", "."],
                  [".", "Duration", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics",
                "period": 300
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${InvoiceTriggerFunction}' | fields @timestamp, @message | sort @timestamp desc | limit 100",
                "region": "${AWS::Region}",
                "title": "Recent Processing Logs",
                "view": "table"
              }
            }
          ]
        }

  # OUTPUTS

Outputs:
  InvoiceUploadBucketName:
    Description: S3 bucket for uploading invoices
    Value: !Ref InvoiceUploadBucket
    Export:
      Name: !Sub '${AWS::StackName}-InvoiceUploadBucket-${Environment}'

  ProcessedInvoicesBucketName:
    Description: S3 bucket for processed invoices and PDFs
    Value: !Ref ProcessedInvoicesBucket
    Export:
      Name: !Sub '${AWS::StackName}-ProcessedInvoicesBucket-${Environment}'

  InvoicesTableName:
    Description: DynamoDB table for invoice records
    Value: !Ref InvoicesTable
    Export:
      Name: !Sub '${AWS::StackName}-InvoicesTable-${Environment}'

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId-${Environment}'

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId-${Environment}'

  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl-${Environment}'

  AmplifyAppId:
    Description: Amplify application ID
    Value: !Ref AmplifyApp
    Export:
      Name: !Sub '${AWS::StackName}-AmplifyAppId-${Environment}'

  AmplifyAppUrl:
    Description: Amplify application URL
    Value: !Sub 'https://${AmplifyApp.DefaultDomain}'
    Export:
      Name: !Sub '${AWS::StackName}-AmplifyAppUrl-${Environment}'

  AmplifySourceBucketName:
    Description: S3 bucket for Amplify source files
    Value: !Ref AmplifySourceBucket
    Export:
      Name: !Sub '${AWS::StackName}-AmplifySourceBucket-${Environment}'

  CloudWatchDashboardUrl:
    Description: CloudWatch dashboard URL
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${CloudWatchDashboard}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchDashboardUrl-${Environment}'

  AgentCoreDeployFunction:
    Description: Lambda function name for AgentCore deployment
    Value: !Ref AgentCoreDeployFunction
    Export:
      Name: !Sub '${AWS::StackName}-AgentCoreDeployFunction-${Environment}'

  GlobalInvoiceAIAgentRepo:
    Description: ECR repository URI for AgentCore Docker images
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${GlobalInvoiceAIAgentRepo}'
    Export:
      Name: !Sub '${AWS::StackName}-GlobalInvoiceAIAgentRepo-${Environment}'

  AgentCoreRuntimeArn:
    Description: AgentCore Runtime ARN (stored in Parameter Store)
    Value: !Sub '/globalinvoiceai/agentcore/runtime-arn'
    Export:
      Name: !Sub '${AWS::StackName}-AgentCoreRuntimeArn-${Environment}'
