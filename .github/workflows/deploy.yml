name: Deploy GlobalInvoiceAI

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

# Region is set per environment in .github/environments/

# Required for OIDC authentication
permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate CloudFormation Template
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    outputs:
      template-valid: ${{ steps.validate.outputs.valid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Get AWS account ID
        id: aws-account
        run: |
          echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Validate CloudFormation template
        id: validate
        run: |
          if aws cloudformation validate-template \
            --template-body file://cloudformation/globalinvoiceai-stack.yaml \
            --region us-west-2; then
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "❌ CloudFormation template validation failed"
            exit 1
          fi

  package-and-deploy:
    name: Package and Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.template-valid == 'true'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    outputs:
      user-pool-id: ${{ steps.stack-outputs.outputs.user-pool-id }}
      user-pool-client-id: ${{ steps.stack-outputs.outputs.user-pool-client-id }}
      amplify-url: ${{ steps.stack-outputs.outputs.amplify-url }}
      api-gateway-url: ${{ steps.stack-outputs.outputs.api-gateway-url }}
      invoice-bucket: ${{ steps.stack-outputs.outputs.invoice-bucket }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Get AWS account ID
        id: aws-account
        run: |
          echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Setup S3 bucket for deployment artifacts
        run: |
          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          BUCKET_NAME="globalinvoiceai-deployment-us-west-2-${ENVIRONMENT}"
          echo "DEPLOYMENT_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV

          # Check if bucket exists
          if aws s3 ls s3://${BUCKET_NAME} --region us-west-2 2>/dev/null; then
            echo "Using existing deployment bucket: ${BUCKET_NAME}"
          else
            if aws s3 mb s3://${BUCKET_NAME} --region us-west-2; then
              echo "Created deployment bucket: ${BUCKET_NAME}"
            else
              echo "Failed to create deployment bucket"
              exit 1
            fi
          fi

      - name: Package CloudFormation template
        run: |
          aws cloudformation package \
            --template-file cloudformation/globalinvoiceai-stack.yaml \
            --s3-bucket ${{ env.DEPLOYMENT_BUCKET }} \
            --output-template-file packaged-template.yaml \
            --region us-west-2

      - name: Package Lambda functions
        run: |
          ENVIRONMENT="${{ env.ENVIRONMENT }}"

          # Package invoice-trigger function
          cd lambda/invoice-trigger
          zip -r invoice-trigger-${ENVIRONMENT}.zip .
          mv invoice-trigger-${ENVIRONMENT}.zip ../..
          cd ../..

          # Package pdf-generator function
          cd lambda/pdf-generator
          zip -r pdf-generator-${ENVIRONMENT}.zip .
          mv pdf-generator-${ENVIRONMENT}.zip ../..
          cd ../..

          # Package agentcore-deploy function
          cd lambda/agentcore-deploy
          zip -r agentcore-deploy-${ENVIRONMENT}.zip .
          mv agentcore-deploy-${ENVIRONMENT}.zip ../..
          cd ../..

          # Verify files exist
          ls -la *-*.zip

          # Upload Lambda packages to S3
          aws s3 cp invoice-trigger-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/invoice-trigger-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp pdf-generator-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/pdf-generator-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp agentcore-deploy-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/agentcore-deploy-${ENVIRONMENT}.zip --region us-west-2

      - name: Check stack status and prepare for deployment
        run: |
          STACK_NAME="globalinvoiceai-${{ env.ENVIRONMENT }}"

          # Check if stack exists and its status
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --region us-west-2 --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")

          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "ROLLBACK_FAILED" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ]; then
            echo "Found failed stack in ${STACK_STATUS} state, deleting before redeployment..."
            aws cloudformation delete-stack --stack-name ${STACK_NAME} --region us-west-2
            aws cloudformation wait stack-delete-complete --stack-name ${STACK_NAME} --region us-west-2
            echo "Failed stack deleted successfully"
          elif [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
            echo "Stack in recoverable state, proceeding with update"
          elif [ "$STACK_STATUS" = "UPDATE_IN_PROGRESS" ] || [ "$STACK_STATUS" = "CREATE_IN_PROGRESS" ]; then
            echo "Stack operation in progress, waiting for completion..."
            aws cloudformation wait stack-create-complete --stack-name ${STACK_NAME} --region us-west-2 2>/dev/null ||
            aws cloudformation wait stack-update-complete --stack-name ${STACK_NAME} --region us-west-2 2>/dev/null || {
              STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --region us-west-2 --query 'Stacks[0].StackStatus' --output text 2>/dev/null)
              echo "Stack operation failed, final status: ${STACK_STATUS}"
            }
          else
            echo "Stack status: ${STACK_STATUS}"
          fi

      - name: Determine stack name and parameters
        id: stack-config
        run: |
          STACK_NAME="globalinvoiceai-${{ env.ENVIRONMENT }}"
          echo "stack-name=${STACK_NAME}" >> $GITHUB_OUTPUT

          # Generate deterministic Cognito domain prefix
          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          REPO_NAME="GlobalInvoiceAI"

          # Create deterministic suffix based on account ID and repo name
          DETERMINISTIC_SUFFIX=$(echo "${{ steps.aws-account.outputs.account-id }}${REPO_NAME}" | md5sum | head -c 8 | tr '[:upper:]' '[:lower:]')
          COGNITO_PREFIX="globalinvoiceai-${DETERMINISTIC_SUFFIX}"

          echo "Using Cognito domain: ${COGNITO_PREFIX}-${ENVIRONMENT}"

          echo "cognito-prefix=${COGNITO_PREFIX}" >> $GITHUB_OUTPUT

      - name: Deploy CloudFormation stack
        run: |
          # Always upload packaged template to S3 for reliability and to handle size limits
          TEMPLATE_S3_KEY="cloudformation/globalinvoiceai-stack-${{ env.ENVIRONMENT }}.yaml"
          TEMPLATE_SIZE=$(stat -f%z packaged-template.yaml 2>/dev/null || stat -c%s packaged-template.yaml 2>/dev/null || echo "0")

          echo "Packaged template size: $TEMPLATE_SIZE bytes"
          echo "Uploading packaged template to S3..."

          aws s3 cp packaged-template.yaml s3://${{ env.DEPLOYMENT_BUCKET }}/$TEMPLATE_S3_KEY --region us-west-2

          # Check if stack exists and deploy accordingly
          STACK_EXISTS=$(aws cloudformation describe-stacks --stack-name ${{ steps.stack-config.outputs.stack-name }} --region us-west-2 --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")

          if [ "$STACK_EXISTS" = "DOES_NOT_EXIST" ]; then
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --template-url "https://${{ env.DEPLOYMENT_BUCKET }}.s3.us-west-2.amazonaws.com/$TEMPLATE_S3_KEY" \
              --stack-name ${{ steps.stack-config.outputs.stack-name }} \
              --parameters \
                ParameterKey=Environment,ParameterValue=${{ env.ENVIRONMENT }} \
                ParameterKey=CognitoDomainPrefix,ParameterValue=${{ steps.stack-config.outputs.cognito-prefix }} \
                ParameterKey=DeploymentArtifactsBucket,ParameterValue=${{ env.DEPLOYMENT_BUCKET }} \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
              --region us-west-2
          else
            echo "Updating existing stack..."
            # Capture the output and exit code of update-stack command
            UPDATE_OUTPUT=$(aws cloudformation update-stack \
              --template-url "https://${{ env.DEPLOYMENT_BUCKET }}.s3.us-west-2.amazonaws.com/$TEMPLATE_S3_KEY" \
              --stack-name ${{ steps.stack-config.outputs.stack-name }} \
              --parameters \
                ParameterKey=Environment,ParameterValue=${{ env.ENVIRONMENT }} \
                ParameterKey=CognitoDomainPrefix,ParameterValue=${{ steps.stack-config.outputs.cognito-prefix }} \
                ParameterKey=DeploymentArtifactsBucket,ParameterValue=${{ env.DEPLOYMENT_BUCKET }} \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
              --region us-west-2 2>&1)
            UPDATE_EXIT_CODE=$?

            if [ $UPDATE_EXIT_CODE -eq 0 ]; then
              echo "Stack update completed successfully"
            elif echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
              echo "Stack is already up-to-date - no updates needed ✅"
            else
              echo "Stack update failed:"
              echo "$UPDATE_OUTPUT"
              exit 1
            fi
          fi

      - name: Get stack outputs
        id: stack-outputs
        run: |
          STACK_NAME="${{ steps.stack-config.outputs.stack-name }}"

          # Get stack outputs and save them as environment variables
          aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs' \
            --output json > stack-outputs.json

          # Extract key outputs
          AMPLIFY_URL=$(jq -r '.[] | select(.OutputKey=="AmplifyAppUrl") | .OutputValue' stack-outputs.json)
          API_GATEWAY_URL=$(jq -r '.[] | select(.OutputKey=="ApiGatewayUrl") | .OutputValue' stack-outputs.json)
          INVOICE_BUCKET=$(jq -r '.[] | select(.OutputKey=="InvoiceUploadBucketName") | .OutputValue' stack-outputs.json)
          USER_POOL_ID=$(jq -r '.[] | select(.OutputKey=="UserPoolId") | .OutputValue' stack-outputs.json)
          USER_POOL_CLIENT_ID=$(jq -r '.[] | select(.OutputKey=="UserPoolClientId") | .OutputValue' stack-outputs.json)

          echo "amplify-url=${AMPLIFY_URL}" >> $GITHUB_OUTPUT
          echo "api-gateway-url=${API_GATEWAY_URL}" >> $GITHUB_OUTPUT
          echo "invoice-bucket=${INVOICE_BUCKET}" >> $GITHUB_OUTPUT
          echo "user-pool-id=${USER_POOL_ID}" >> $GITHUB_OUTPUT
          echo "user-pool-client-id=${USER_POOL_CLIENT_ID}" >> $GITHUB_OUTPUT


      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << 'EOF'
          # 🚀 GlobalInvoiceAI Deployment Summary (Bucket Strategy)

          **Environment:** ${{ env.ENVIRONMENT }}
          **Deployment Bucket:** globalinvoiceai-deployment-us-west-2-${{ env.ENVIRONMENT }}
          **Run ID:** ${{ github.run_id }}
          **Timestamp:** $(date -u)
          **Strategy:** Bucket-based deployment

          ## 📋 Stack Information
          - **Stack Name:** ${{ steps.stack-config.outputs.stack-name }}
          - **Region:** us-west-2
          - **Deployment Strategy:** Bucket-based (artifacts stored in S3 buckets per environment)

          ## 🔗 Access URLs
          - **Admin Dashboard:** ${{ steps.stack-outputs.outputs.amplify-url }}
          - **API Gateway:** ${{ steps.stack-outputs.outputs.api-gateway-url }}

          ## 📦 S3 Buckets
          - **Deployment Artifacts:** ${{ env.DEPLOYMENT_BUCKET }}
          - **Invoice Upload:** ${{ steps.stack-outputs.outputs.invoice-bucket }}

          ## 🔧 Environment Variables (Set by CloudFormation)
          - ✅ **User Pool ID:** ${{ steps.stack-outputs.outputs.user-pool-id }}
          - ✅ **User Pool Client ID:** ${{ steps.stack-outputs.outputs.user-pool-client-id }}
          - ✅ **API Gateway URL:** ${{ steps.stack-outputs.outputs.api-gateway-url }}
          - ✅ **Region:** us-west-2

          ## 🎨 Frontend Status
          - ✅ **React App:** Built successfully
          - ✅ **Frontend Artifacts:** Uploaded to Amplify source bucket
          - ✅ **Frontend Artifacts:** Archived in deployment bucket

          ## 🤖 AgentCore Status
          - ✅ **ECR Repository:** Deployed
          - ✅ **Docker Image:** Built and pushed
          - ✅ **Runtime Deployment:** Initiated via Lambda function

          ## 🧪 Testing
          1. Open the admin dashboard URL (should load React frontend)
          2. Register a new user account (should show "Email" fields)
          3. Login and verify UI components load correctly
          4. Upload sample invoices to the S3 bucket
          5. Monitor processing in CloudWatch logs
          6. Verify AgentCore responses in invoice processing

          ## 📞 Next Steps
          - Authentication should work automatically
          - Test invoice processing with sample data
          - Monitor AgentCore deployment completion
          - Configure monitoring alerts if needed

          ## 🎯 Bucket Strategy Benefits
          - Environment-specific artifact isolation
          - Independent deployment pipelines per environment
          - No branch dependency for deployments
          - Explicit bucket selection for controlled releases
          EOF

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Deployment Preview

              **Environment:** ${{ env.ENVIRONMENT }}

              ### 📋 Stack Information
              - Stack Name: ${{ steps.stack-config.outputs.stack-name }}
              - Region: us-west-2

              ### 🔗 Access URLs
              - **Admin Dashboard:** ${{ steps.stack-outputs.outputs.amplify-url }}
              - **API Gateway:** ${{ steps.stack-outputs.outputs.api-gateway-url }}

              ### 📦 S3 Buckets
              - **Invoice Upload:** ${{ steps.stack-outputs.outputs.invoice-bucket }}

              ### 🔧 Environment Variables (Set by CloudFormation)
              - **User Pool ID:** ${{ steps.stack-outputs.outputs.user-pool-id }}
              - **User Pool Client ID:** ${{ steps.stack-outputs.outputs.user-pool-client-id }}

              > This is a deployment preview. The stack will be deployed when the PR is merged.`
            })

  build-frontend:
    name: Build Frontend Application
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    needs: package-and-deploy
    if: needs.validate.outputs.template-valid == 'true'
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
      AWS_REGION: us-west-2
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Configure frontend with Cognito values
        working-directory: frontend
        run: |
          node ../scripts/configure-frontend.js "${{ needs.package-and-deploy.outputs.user-pool-id }}" "${{ needs.package-and-deploy.outputs.user-pool-client-id }}" "${{ env.AWS_REGION }}" "${{ needs.package-and-deploy.outputs.api-gateway-url }}" "${{ env.ENVIRONMENT }}"

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Setup deployment bucket environment variable
        run: |
          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          BUCKET_NAME="globalinvoiceai-deployment-us-west-2-${ENVIRONMENT}"
          echo "DEPLOYMENT_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV

      - name: Upload frontend build to Amplify source bucket
        run: |
          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          STACK_NAME="globalinvoiceai-${ENVIRONMENT}"

          # Get the Amplify source bucket name from stack outputs
          AMPLIFY_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`AmplifySourceBucketName`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [ -z "$AMPLIFY_BUCKET" ] || [ "$AMPLIFY_BUCKET" = "None" ]; then
            # Fallback to constructed bucket name
            AMPLIFY_BUCKET="${STACK_NAME}-amplify-source-${ENVIRONMENT}"
          fi

          # Upload frontend build files to Amplify source bucket
          aws s3 sync frontend/build/ s3://${AMPLIFY_BUCKET}/frontend/ --region us-west-2 --delete

          echo "Frontend build uploaded to s3://${AMPLIFY_BUCKET}/frontend/"

          # Also upload to deployment bucket for backup/archival
          DEPLOYMENT_BUCKET="${{ env.DEPLOYMENT_BUCKET }}"
          aws s3 sync frontend/build/ s3://${DEPLOYMENT_BUCKET}/frontend/ --region us-west-2 --delete

          echo "Frontend build also archived to s3://${DEPLOYMENT_BUCKET}/frontend/"

      - name: Deploy React frontend to Amplify
        id: deploy-amplify
        run: |
          cd frontend

          # Create a deployment package
          cd build
          zip -r ../amplify-deployment.zip .
          cd ..

          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          STACK_NAME="globalinvoiceai-${ENVIRONMENT}"

          # Get Amplify App ID from stack outputs (extract just the app ID from ARN)
          AMPLIFY_APP_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [ -z "$AMPLIFY_APP_ARN" ] || [ "$AMPLIFY_APP_ARN" = "None" ]; then
            echo "Could not find Amplify App ARN in stack outputs"
            exit 1
          fi

          # Extract just the app ID from the ARN (format: arn:aws:amplify:region:account:apps/appId)
          AMPLIFY_APP_ID=$(echo "$AMPLIFY_APP_ARN" | awk -F'/' '{print $NF}')

          echo "Starting Amplify deployment..."
          echo "App ID: ${AMPLIFY_APP_ID}"
          echo "Branch: ${ENVIRONMENT}"

          # Create deployment
          DEPLOYMENT_OUTPUT=$(aws amplify create-deployment \
            --app-id "$AMPLIFY_APP_ID" \
            --branch-name "$ENVIRONMENT" \
            --region us-west-2 \
            --output json)

          UPLOAD_URL=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.zipUploadUrl')
          JOB_ID=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.jobId')

          echo "Deployment created with Job ID: $JOB_ID"

          # Upload the zip file to the pre-signed URL with retry
          MAX_RETRIES=3
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -X PUT "$UPLOAD_URL" \
              -H "Content-Type: application/zip" \
              --max-time 300 \
              --data-binary @amplify-deployment.zip; then
              echo "✅ Frontend package uploaded successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Upload attempt $RETRY_COUNT failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "❌ Failed to upload frontend package after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

          # Start the deployment
          aws amplify start-deployment \
            --app-id "$AMPLIFY_APP_ID" \
            --branch-name "$ENVIRONMENT" \
            --job-id "$JOB_ID" \
            --region us-west-2 || (echo "❌ Failed to start Amplify deployment" && exit 1)

          echo "🚀 Amplify deployment started, waiting for completion..."

          # Wait for deployment completion
          MAX_WAIT=900  # 15 minutes
          WAIT_TIME=0
          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            JOB_STATUS=$(aws amplify get-job \
              --app-id "$AMPLIFY_APP_ID" \
              --branch-name "$ENVIRONMENT" \
              --job-id "$JOB_ID" \
              --query 'job.summary.status' \
              --output text \
              --region us-west-2)

            echo "Deployment status: $JOB_STATUS (waited ${WAIT_TIME}s)"

            if [ "$JOB_STATUS" = "SUCCEED" ]; then
              echo "✅ Amplify deployment completed successfully!"
              break
            elif [ "$JOB_STATUS" = "FAILED" ] || [ "$JOB_STATUS" = "CANCELLED" ]; then
              echo "❌ Amplify deployment failed with status: $JOB_STATUS"
              exit 1
            fi
            sleep 30
            WAIT_TIME=$((WAIT_TIME + 30))
          done

          if [ $WAIT_TIME -ge $MAX_WAIT ]; then
            echo "❌ Amplify deployment timed out after 15 minutes"
            exit 1
          fi

          # Upload frontend build to S3 bucket for backup/static hosting
          echo "📦 Uploading frontend build to S3 backup bucket..."
          aws s3 sync build/ s3://${{ env.DEPLOYMENT_BUCKET }}/frontend/ --delete --region us-west-2
          echo "✅ Frontend build uploaded to S3 backup"

  build-agentcore:
    name: Build and Deploy AgentCore Application
    runs-on: ubuntu-latest
    needs: [package-and-deploy, build-frontend]
    if: needs.validate.outputs.template-valid == 'true'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Get AWS account ID
        id: aws-account
        run: |
          echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-west-2 | \
          docker login --username AWS --password-stdin \
          ${{ steps.aws-account.outputs.account-id }}.dkr.ecr.us-west-2.amazonaws.com

      - name: Build and push AgentCore Docker image
        run: |
          STACK_NAME="globalinvoiceai-${{ env.ENVIRONMENT }}"

          # Get ECR repository URI from stack outputs
          ECR_REPO=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`GlobalInvoiceAIAgentRepo`].OutputValue' \
            --output text)

          if [ -z "$ECR_REPO" ] || [ "$ECR_REPO" = "None" ]; then
            echo "ECR repository not found in stack outputs"
            exit 1
          fi

          IMAGE_TAG="${ECR_REPO}:latest"

          cd agentcore
          docker build -t ${IMAGE_TAG} .
          docker push ${IMAGE_TAG}

      - name: Trigger AgentCore deployment
        run: |
          STACK_NAME="globalinvoiceai-${{ env.ENVIRONMENT }}"

          # Invoke the AgentCoreDeployFunction to deploy the new Docker image
          echo "Triggering AgentCore deployment via Lambda function..."

          # Get the AgentCore deploy function name
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`AgentCoreDeployFunction`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [ -z "$FUNCTION_NAME" ] || [ "$FUNCTION_NAME" = "None" ]; then
            # Fallback to constructed function name
            FUNCTION_NAME="${STACK_NAME}-agentcore-deploy-${{ env.ENVIRONMENT }}"
          fi

          echo "Invoking AgentCore deploy function: ${FUNCTION_NAME}"

          # Invoke the function (it will handle the deployment asynchronously)
          aws lambda invoke \
            --function-name ${FUNCTION_NAME} \
            --region us-west-2 \
            --payload '{}' \
            response.json

          # Check if invocation was successful
          if [ $? -eq 0 ]; then
            echo "AgentCore deployment Lambda invoked successfully"
            # Wait a moment for deployment to start
            sleep 10

            # Check stack status to verify infrastructure is ready
            STACK_STATUS=$(aws cloudformation describe-stacks \
              --stack-name ${STACK_NAME} \
              --region us-west-2 \
              --query 'Stacks[0].StackStatus' \
              --output text)

            if [ "$STACK_STATUS" = "CREATE_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_COMPLETE" ]; then
              echo "✅ Infrastructure deployment completed successfully"
              echo "✅ AgentCore deployment initiated"
            else
              echo "⚠️  Stack status: ${STACK_STATUS} - AgentCore deployment may still be in progress"
            fi
          else
            echo "❌ Failed to invoke AgentCore deployment Lambda"
            exit 1
          fi

  cleanup:
    name: Cleanup Deployment Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [package-and-deploy, build-frontend, build-agentcore]
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Clean up deployment artifacts
        run: |
          # Clean up artifacts from deployment bucket
          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          BUCKET_NAME="globalinvoiceai-deployment-us-west-2-${ENVIRONMENT}"

          # Remove Lambda function ZIP files
          aws s3 rm s3://${BUCKET_NAME}/lambda/invoice-trigger-${ENVIRONMENT}.zip || true
          aws s3 rm s3://${BUCKET_NAME}/lambda/pdf-generator-${ENVIRONMENT}.zip || true
          aws s3 rm s3://${BUCKET_NAME}/lambda/agentcore-deploy-${ENVIRONMENT}.zip || true

          # Note: Frontend artifacts are kept in Amplify source bucket for future deployments
          # They can be cleaned up manually if needed
