name: Deploy GlobalInvoiceAI

on:
  # push:
  #   branches:
  #     - main
  #     - develop
  #   paths:
  #     - 'cloudformation/**'
  #     - 'agentcore/**'
  #     - '.github/workflows/**'
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - 'cloudformation/**'
  #     - 'agentcore/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

# Region is set per environment in .github/environments/

# Required for OIDC authentication
permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate CloudFormation Template
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    env:
      AWS_REGION: us-west-2
    outputs:
      template-valid: ${{ steps.validate.outputs.valid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Validate CloudFormation template
        id: validate
        run: |
          echo "Validating CloudFormation template..."
          if aws cloudformation validate-template \
            --template-body file://cloudformation/globalinvoiceai-stack.yaml \
            --region us-west-2; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "✅ CloudFormation template is valid"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "❌ CloudFormation template validation failed"
            exit 1
          fi

  package-and-deploy:
    name: Package and Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.template-valid == 'true'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Setup S3 bucket for deployment artifacts
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          BUCKET_NAME="globalinvoiceai-deployment-us-west-2-${ENVIRONMENT}"
          echo "DEPLOYMENT_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV

          # Check if bucket exists
          if aws s3 ls s3://${BUCKET_NAME} --region us-west-2 2>/dev/null; then
            echo "✅ Using existing deployment bucket: ${BUCKET_NAME}"
          else
            echo "📦 Creating new deployment bucket: ${BUCKET_NAME}"
            if aws s3 mb s3://${BUCKET_NAME} --region us-west-2; then
              echo "✅ Created deployment bucket: ${BUCKET_NAME}"
            else
              echo "❌ Failed to create deployment bucket"
              exit 1
            fi
          fi

      - name: Package CloudFormation template
        run: |
          echo "📦 Packaging CloudFormation template..."
          aws cloudformation package \
            --template-file cloudformation/globalinvoiceai-stack.yaml \
            --s3-bucket ${{ env.DEPLOYMENT_BUCKET }} \
            --output-template-file packaged-template.yaml \
            --region us-west-2

      - name: Package Lambda functions
        run: |
          echo "📦 Packaging Lambda functions..."
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"

          # Package invoice-trigger function
          cd lambda/invoice-trigger
          zip -r invoice-trigger-${ENVIRONMENT}.zip .
          mv invoice-trigger-${ENVIRONMENT}.zip ../..
          cd ../..

          # Package pdf-generator function
          cd lambda/pdf-generator
          zip -r pdf-generator-${ENVIRONMENT}.zip .
          mv pdf-generator-${ENVIRONMENT}.zip ../..
          cd ../..

          # Package agentcore-deploy function
          cd lambda/agentcore-deploy
          zip -r agentcore-deploy-${ENVIRONMENT}.zip .
          mv agentcore-deploy-${ENVIRONMENT}.zip ../..
          cd ../..

          # Verify files exist
          ls -la *-*.zip

          # Upload Lambda packages to S3
          aws s3 cp invoice-trigger-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/invoice-trigger-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp pdf-generator-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/pdf-generator-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp agentcore-deploy-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/agentcore-deploy-${ENVIRONMENT}.zip --region us-west-2

          echo "✅ Lambda functions packaged and uploaded"

      - name: Check stack status and prepare for deployment
        run: |
          STACK_NAME="globalinvoiceai-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"

          # Check if stack exists and its status
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --region us-west-2 --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")

          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "ROLLBACK_FAILED" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ]; then
            echo "🧹 Found failed stack in ${STACK_STATUS} state, deleting before redeployment..."
            aws cloudformation delete-stack --stack-name ${STACK_NAME} --region us-west-2

            # Wait for deletion to complete
            echo "⏳ Waiting for stack deletion..."
            aws cloudformation wait stack-delete-complete --stack-name ${STACK_NAME} --region us-west-2
            echo "✅ Failed stack deleted successfully - ready for new deployment"
          elif [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
            echo "🔄 Stack is in UPDATE_ROLLBACK_COMPLETE state (rolled back to working configuration) - proceeding with update..."
            echo "✅ Stack is in recoverable state - will attempt update"
          elif [ "$STACK_STATUS" = "UPDATE_IN_PROGRESS" ] || [ "$STACK_STATUS" = "CREATE_IN_PROGRESS" ]; then
            echo "⏳ Stack update/create in progress, waiting for completion..."
            aws cloudformation wait stack-create-complete --stack-name ${STACK_NAME} --region us-west-2 2>/dev/null ||
            aws cloudformation wait stack-update-complete --stack-name ${STACK_NAME} --region us-west-2 2>/dev/null || {
              echo "❌ Stack operation failed, checking status..."
              STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --region us-west-2 --query 'Stacks[0].StackStatus' --output text 2>/dev/null)
              echo "📋 Final stack status: ${STACK_STATUS}"
            }
          else
            echo "📋 Stack status: ${STACK_STATUS} - proceeding with deployment"
          fi

      - name: Determine stack name and parameters
        id: stack-config
        run: |
          STACK_NAME="globalinvoiceai-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          echo "stack-name=${STACK_NAME}" >> $GITHUB_OUTPUT

          # Generate deterministic Cognito domain prefix
          echo "🔄 Generating deterministic Cognito domain prefix..."
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          REPO_NAME="GlobalInvoiceAI"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # Create deterministic suffix based on account ID and repo name
          DETERMINISTIC_SUFFIX=$(echo "${ACCOUNT_ID}${REPO_NAME}" | md5sum | head -c 8 | tr '[:upper:]' '[:lower:]')
          COGNITO_PREFIX="globalinvoiceai-${ENVIRONMENT}-${DETERMINISTIC_SUFFIX}"

          echo "✅ Using deterministic domain: ${COGNITO_PREFIX}"
          echo "📝 Domain is deterministic based on account ID and repo name"

          echo "cognito-prefix=${COGNITO_PREFIX}" >> $GITHUB_OUTPUT

      - name: Deploy CloudFormation stack
        run: |
          echo "🚀 Deploying CloudFormation stack: ${{ steps.stack-config.outputs.stack-name }}"

          # Deploy the stack
          aws cloudformation deploy \
            --template-file packaged-template.yaml \
            --stack-name ${{ steps.stack-config.outputs.stack-name }} \
            --parameter-overrides \
              Environment=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }} \
              CognitoDomainPrefix=${{ steps.stack-config.outputs.cognito-prefix }} \
              DeploymentArtifactsBucket=${{ env.DEPLOYMENT_BUCKET }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --region us-west-2 \
            --no-fail-on-empty-changeset

      - name: Get stack outputs
        id: stack-outputs
        run: |
          echo "📋 Getting stack outputs..."
          STACK_NAME="${{ steps.stack-config.outputs.stack-name }}"

          # Get stack outputs and save them as environment variables
          aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs' \
            --output json > stack-outputs.json

          # Extract key outputs
          AMPLIFY_URL=$(jq -r '.[] | select(.OutputKey=="AmplifyAppUrl") | .OutputValue' stack-outputs.json)
          API_GATEWAY_URL=$(jq -r '.[] | select(.OutputKey=="ApiGatewayUrl") | .OutputValue' stack-outputs.json)
          INVOICE_BUCKET=$(jq -r '.[] | select(.OutputKey=="InvoiceUploadBucketName") | .OutputValue' stack-outputs.json)

          echo "amplify-url=${AMPLIFY_URL}" >> $GITHUB_OUTPUT
          echo "api-gateway-url=${API_GATEWAY_URL}" >> $GITHUB_OUTPUT
          echo "invoice-bucket=${INVOICE_BUCKET}" >> $GITHUB_OUTPUT

          echo "✅ Stack deployed successfully!"
          echo "🎯 Amplify App URL: ${AMPLIFY_URL}"
          echo "🔗 API Gateway URL: ${API_GATEWAY_URL}"
          echo "📦 Invoice Upload Bucket: ${INVOICE_BUCKET}"

      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << 'EOF'
          # 🚀 GlobalInvoiceAI Deployment Summary

          **Environment:** ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
          **Branch:** ${{ github.ref_name }}
          **Run ID:** ${{ github.run_id }}
          **Timestamp:** $(date -u)

          ## 📋 Stack Information
          - **Stack Name:** ${{ steps.stack-config.outputs.stack-name }}
          - **Region:** us-west-2

          ## 🔗 Access URLs
          - **Admin Dashboard:** ${{ steps.stack-outputs.outputs.amplify-url }}
          - **API Gateway:** ${{ steps.stack-outputs.outputs.api-gateway-url }}

          ## 📦 S3 Buckets
          - **Invoice Upload:** ${{ steps.stack-outputs.outputs.invoice-bucket }}

          ## 🧪 Testing
          1. Upload sample invoices to the S3 bucket
          2. Monitor processing in CloudWatch logs
          3. Access admin dashboard for invoice management

          ## 📞 Next Steps
          - Create admin user in Cognito User Pool
          - Test invoice processing with sample data
          - Configure monitoring alerts if needed
          EOF

          echo "📝 Deployment summary created"

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Deployment Preview

              **Environment:** ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}

              ### 📋 Stack Information
              - Stack Name: ${{ steps.stack-config.outputs.stack-name }}
              - Region: us-west-2

              ### 🔗 Access URLs
              - **Admin Dashboard:** ${{ steps.stack-outputs.outputs.amplify-url }}
              - **API Gateway:** ${{ steps.stack-outputs.outputs.api-gateway-url }}

              ### 📦 S3 Buckets
              - **Invoice Upload:** ${{ steps.stack-outputs.outputs.invoice-bucket }}

              > This is a deployment preview. The stack will be deployed when the PR is merged.`
            })

  build-agentcore:
    name: Build and Deploy AgentCore Application
    runs-on: ubuntu-latest
    needs: package-and-deploy
    if: needs.validate.outputs.template-valid == 'true'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        run: |
          # Get ECR login token and login
          aws ecr get-login-password --region us-west-2 | \
          docker login --username AWS --password-stdin \
          $(aws sts get-caller-identity --query Account --output text).dkr.ecr.us-west-2.amazonaws.com

      - name: Build and push AgentCore Docker image
        run: |
          STACK_NAME="globalinvoiceai-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"

          # Get ECR repository URI from stack outputs
          ECR_REPO=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`GlobalInvoiceAIAgentRepo`].OutputValue' \
            --output text)

          if [ -z "$ECR_REPO" ] || [ "$ECR_REPO" = "None" ]; then
            echo "❌ ECR repository not found in stack outputs"
            exit 1
          fi

          echo "🏗️ Building AgentCore Docker image..."
          IMAGE_TAG="${ECR_REPO}:latest"

          cd agentcore
          docker build -t ${IMAGE_TAG} .
          docker push ${IMAGE_TAG}

          echo "✅ AgentCore image built and pushed: ${IMAGE_TAG}"

      - name: Trigger AgentCore deployment
        run: |
          STACK_NAME="globalinvoiceai-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"

          echo "🔄 Triggering AgentCore deployment via CloudFormation..."

          # The AgentCoreDeployFunction in the CloudFormation template will handle the actual deployment
          # We just need to wait for it to complete

          # Check if AgentCoreDeployFunction exists and is running
          FUNCTION_NAME="${STACK_NAME}-agentcore-deploy-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"

          # Wait for the Custom Resource to complete (it runs during stack deployment)
          echo "⏳ Waiting for AgentCore deployment to complete..."

          # Check stack status
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region us-west-2 \
            --query 'Stacks[0].StackStatus' \
            --output text)

          if [ "$STACK_STATUS" = "CREATE_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_COMPLETE" ]; then
            echo "✅ AgentCore deployment completed successfully"
          else
            echo "⚠️ Stack status: ${STACK_STATUS}. AgentCore deployment may still be in progress."
          fi

  cleanup:
    name: Cleanup Lambda Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [package-and-deploy, build-agentcore]
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Clean up deployment artifacts
        run: |
          # Clean up Lambda function ZIP files from deployment bucket
          if [ ! -z "${{ env.DEPLOYMENT_BUCKET }}" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
            echo "🧹 Cleaning up Lambda ZIP files from bucket: ${{ env.DEPLOYMENT_BUCKET }}"

            # Remove Lambda function ZIP files
            aws s3 rm s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/invoice-trigger-${ENVIRONMENT}.zip || true
            aws s3 rm s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/pdf-generator-${ENVIRONMENT}.zip || true
            aws s3 rm s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/agentcore-deploy-${ENVIRONMENT}.zip || true

            echo "✅ Lambda artifacts cleaned up (bucket preserved for reuse)"
          fi

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [package-and-deploy, build-agentcore, cleanup]
    steps:
      - name: Download deployment summary
        uses: actions/download-artifact@v4
        with:
          name: deployment-summary

      - name: Send notification
        run: |
          echo "📢 Deployment completed for ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }} environment"
          echo "📋 Check deployment-summary.md for details"
